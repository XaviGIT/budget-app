generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id           String        @id @default(cuid())
  name         String        @unique
  balance      Float
  type         AccountType
  transactions Transaction[] // Transactions from this account
  transfersTo  Transaction[] @relation("TransferToAccount") // Transfers to this account
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Payee        Payee?

  @@map("accounts")
}

model Payee {
  id           String        @id @default(cuid())
  name         String        @unique
  icon         String
  account      Account?      @relation(fields: [accountId], references: [id]) // Optional relation to Account
  accountId    String?       @unique // Make it unique for one-to-one
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("payees")
}

model Category {
  id           String        @id @default(cuid())
  name         String        @unique
  icon         String
  transactions Transaction[]
  budgets      Budget[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("categories")
}

enum TransactionType {
  EXPENSE // Regular expense (outflow)
  TRANSFER // Transfer between accounts
  PAYMENT // Credit card/loan payment
}

model Transaction {
  id          String          @id @default(cuid())
  date        DateTime
  payee       Payee           @relation(fields: [payeeId], references: [id])
  payeeId     String
  category    Category        @relation(fields: [categoryId], references: [id])
  categoryId  String
  account     Account         @relation(fields: [accountId], references: [id])
  accountId   String
  type        TransactionType
  amount      Float // Positive number: expense amount or transfer amount
  memo        String?
  // For transfers, we need the destination account
  toAccount   Account?        @relation("TransferToAccount", fields: [toAccountId], references: [id])
  toAccountId String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("transactions")
}

model Budget {
  id            String    @id @default(cuid())
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String
  month         String // YYYY-MM format
  targetMonthly Float
  assigned      Float     @default(0)
  spent         Float     @default(0)
  targetTotal   Float?
  targetDate    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("budgets")
}

enum AccountType {
  CREDIT
  DEBIT
}
